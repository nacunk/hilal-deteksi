# .streamlit/config.toml
[server]
maxUploadSize = 200
enableCORS = false
enableXsrfProtection = true

[browser]
gatherUsageStats = false

[theme]
primaryColor = "#FFD700"
backgroundColor = "#0c0c2e"
secondaryBackgroundColor = "#1a1a3a"
textColor = "#FFFFFF"
font = "sans serif"

[client]
caching = true
displayEnabled = true

# For research deployment optimization
[global]
developmentMode = false
logLevel = "info"

---

# requirements.txt (Updated for research deployment)
streamlit==1.28.0
ultralytics>=8.1.0
opencv-python-headless>=4.8.0
pillow>=9.0.0
requests>=2.28.0
numpy>=1.21.0
pandas>=1.5.0
matplotlib>=3.6.0
seaborn>=0.12.0
plotly>=5.15.0
torch>=2.0.0
torchvision>=0.15.0
pathlib2>=2.3.0
openpyxl>=3.1.0
scikit-learn>=1.3.0
scipy>=1.10.0

# For astronomical calculations
pyephem>=4.1.0
astropy>=5.3.0

# For data processing and analysis
xlsxwriter>=3.1.0
jupyter>=1.0.0

---

# packages.txt (System dependencies)
ffmpeg
libsm6
libxext6
libxrender-dev
libglib2.0-0
libgl1-mesa-glx
libgthread-2.0-0
libgtk-3-dev
pkg-config

---

# .gitignore
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# Research data (don't commit sensitive research data)
data/research_database.csv
data/observation_log.csv
assets/*.jpg
assets/*.png
assets/*.mp4
assets/*.mov
assets/*.avi

# Model files (use Git LFS for large models)
*.pt
models/

# Environment variables
.env
.streamlit/secrets.toml

# IDE
.vscode/
.idea/
*.swp
*.swo
*~

# OS
.DS_Store
Thumbs.db

---

# GitHub Actions Workflow (.github/workflows/deploy.yml)
name: Deploy to Streamlit Cloud

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        sudo apt-get update
        sudo apt-get install -y ffmpeg libsm6 libxext6 libxrender-dev libglib2.0-0 libgl1-mesa-glx
    
    - name: Test imports
      run: |
        python -c "import streamlit; print('Streamlit OK')"
        python -c "import cv2; print('OpenCV OK')"
        python -c "import pandas; print('Pandas OK')"
    
    - name: Test utility functions
      run: |
        python -c "from utils import get_weather, get_astronomical_data; print('Utils OK')"
    
    - name: Lint with flake8
      run: |
        pip install flake8
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy notification
      run: |
        echo "Deployment to Streamlit Cloud triggered"
        echo "Monitor deployment at: https://share.streamlit.io"

---

# docker-compose.yml (For local development)
version: '3.8'

services:
  hilal-research:
    build: .
    ports:
      - "8501:8501"
    volumes:
      - ./data:/app/data
      - ./assets:/app/assets
      - ./models:/app/models
    environment:
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
    restart: unless-stopped

---

# Dockerfile (Optional for advanced deployment)
FROM python:3.10-slim

WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    ffmpeg \
    libsm6 \
    libxext6 \
    libxrender-dev \
    libglib2.0-0 \
    libgl1-mesa-glx \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements first for better caching
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy application code
COPY . .

# Create necessary directories
RUN mkdir -p data assets reports models

# Expose port
EXPOSE 8501

# Health check
HEALTHCHECK CMD curl --fail http://localhost:8501/_stcore/health

# Run application
CMD ["streamlit", "run", "app.py", "--server.port=8501", "--server.address=0.0.0.0"]

---

# .streamlit/secrets.toml.example
# Copy this to .streamlit/secrets.toml and add your API keys

[weather]
openweather_api_key = "your_openweather_api_key_here"
weatherapi_key = "your_weatherapi_key_here"

[research]
institution_name = "Your University Name"
department = "Computer Science / Astronomy"
contact_email = "researcher@university.edu"

[deployment]
debug_mode = false
enable_logging = true
log_level = "INFO"

---

# setup.py (For pip installation)
from setuptools import setup, find_packages

with open("README.md", "r", encoding="utf-8") as fh:
    long_description = fh.read()

with open("requirements.txt", "r", encoding="utf-8") as fh:
    requirements = [line.strip() for line in fh if line.strip() and not line.startswith("#")]

setup(
    name="hilal-detection-research",
    version="2.0.0",
    author="Research Team",
    author_email="researcher@university.edu",
    description="Advanced Hilal Detection System for Academic Research",
    long_description=long_description,
    long_description_content_type="text/markdown",
    url="https://github.com/yourusername/hilal-research",
    packages=find_packages(),
    classifiers=[
        "Development Status :: 4 - Beta",
        "Intended Audience :: Science/Research",
        "Topic :: Scientific/Engineering :: Astronomy",
        "Topic :: Scientific/Engineering :: Image Processing",
        "License :: OSI Approved :: MIT License",
        "Programming Language :: Python :: 3",
        "Programming Language :: Python :: 3.8",
        "Programming Language :: Python :: 3.9",
        "Programming Language :: Python :: 3.10",
    ],
    python_requires=">=3.8",
    install_requires=requirements,
    extras_require={
        "dev": [
            "pytest>=7.0.0",
            "black>=22.0.0",
            "flake8>=5.0.0",
            "jupyter>=1.0.0"
        ],
        "gpu": [
            "torch[cuda]>=2.0.0",
            "torchvision[cuda]>=0.15.0"
        ]
    },
    entry_points={
        "console_scripts": [
            "hilal-research=app:main",
        ],
    },
    project_urls={
        "Bug Reports": "https://github.com/yourusername/hilal-research/issues",
        "Documentation": "https://github.com/yourusername/hilal-research/wiki",
        "Source": "https://github.com/yourusername/hilal-research",
    },
)